import { readJSON, writeJSON, writeText } from '../utils/fs.js';

const CACHE_FILE = '.sweepstacx/scan.json';

export default async function reportCmd({ out = 'sweepstacx-report', json = false }) {
  const scan = await readJSON(CACHE_FILE);
  if (!scan) throw new Error('No scan cache found. Run `sweepstacx scan` first.');

  if (json) {
    process.stdout.write(JSON.stringify(scan, null, 2));
    return;
  }

  const jsonOut = `${out}.json`;
  const mdOut   = `${out}.md`;

  await writeJSON(jsonOut, scan);
  await writeText(mdOut, toMarkdown(scan));

  console.log(`Wrote ${jsonOut}`);
  console.log(`Wrote ${mdOut}`);
}

function mdLink(path) {
  return `[${path}](${encodeURI(path)})`;
}

function toMarkdown(data) {
  const s = data.stats;

  const issuesMd = data.issues.length
    ? data.issues.map((i, idx) => {
        const lines = [];
        lines.push(`### ${idx + 1}. ${i.type}`);
        if (i.file) lines.push(`- File: ${mdLink(i.file)}`);
        if (i.token) lines.push(`- Token: \`${i.token}\``);
        if (i.lines) lines.push(`- Lines: ${i.lines}`);
        if (i.duplicate_of) lines.push(`- Duplicate of: ${mdLink(i.duplicate_of)}`);
        return lines.join('\n');
      }).join('\n\n')
    : '_No issues detected in this pass (v0.1 heuristics)._';

  return [
    `# SweepstacX â€” Scan Report (${data.repo})`,
    ``,
    `**Scanned at:** ${data.scanned_at}`,
    ``,
    `## Summary`,
    `- Files scanned: **${s.files_scanned}**`,
    `- Dead files: **${s.dead_files}**`,
    `- Unused imports: **${s.unused_imports}**`,
    `- Duplicate blocks: **${s.duplicate_blocks}**`,
    `- Stale configs: **${s.stale_configs}**`,
    `- Estimated LOC removed: **${s.loc_removed}**`,
    ``,
    `## Issues`,
    issuesMd,
    ``,
    `---`,
    `_Generated by SweepstacX v0.1_`
  ].join('\n');
}
